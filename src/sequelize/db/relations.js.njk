{%- for table in o.tables %}
{%- if table.relations.length > 0 %}
{# Decide whether to include schema name by reading `x.schema` boolean value from extra context. Apply `dboClassName` filter -#}
const {{ table | dboClassName(x.schema) }} = require("./{{ table.schema.name | dashCase }}-{{ table.name | dashCase }}");
{%- endif %}
{%- endfor %}


/**
 * Builds all relations between models. It is provided as a function to prevent circular references during require.
 */
module.exports = function buildRelations() {
  {#-
    `pg-generator` supports composite key generation. However, as of this template is created, sequelize does not support composite keys.
    For sequlize, we assume foreign keys are not composite keys.
    See: https://github.com/sequelize/sequelize/issues/311
  -#}
  {%- for table in o.tables %}
  {%- for relation in table.o2mRelations %}

  {{ table | dboClassName(x.schema) }}.hasMany({{ relation.targetTable | dboClassName(x.schema) }}, {
    foreignKey: {{ relation.foreignKey.columns[0].name | quote }},
    sourceKey: {{ relation.foreignKey.referencedColumns[0].name | quote }},
    as: {{ relation.name | quote }},
    onDelete: {{ relation.foreignKey.onDelete | quote }},
    onUpdate: {{ relation.foreignKey.onUpdate | quote }},
  });
  {%- endfor %}

  {%- for relation in table.m2oRelations %}

  {{ table | dboClassName(x.schema) }}.belongsTo({{ relation.targetTable | dboClassName(x.schema) }}, {
    foreignKey: {{ relation.foreignKey.columns[0].name | quote }},
    targetKey: {{ relation.foreignKey.referencedColumns[0].name | quote }},
    as: {{ relation.name | quote }},
    onDelete: {{ relation.foreignKey.onDelete | quote }},
    onUpdate: {{ relation.foreignKey.onUpdate | quote }},
  });
  {%- endfor %}

  {%- for relation in table.m2mRelations %}

  {{ table | dboClassName(x.schema) }}.belongsToMany({{ relation.targetTable | dboClassName(x.schema) }}, {
    through: {{ relation.joinTable | dboClassName(x.schema) | quote }},
    otherKey: {{ relation.foreignKey.columns[0].name | quote }},
    sourceKey: {{ relation.foreignKey.referencedColumns[0].name | quote }},
    targetKey: {{ relation.targetForeignKey.referencedColumns[0].name | quote }},
    as: {{ relation.name | quote }},
  });
  {%- endfor %}
  {%- endfor %}
}
